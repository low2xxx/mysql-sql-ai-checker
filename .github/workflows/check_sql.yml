name: SQL Review

# 必要な権限を明示的に指定
permissions:
  issues: write
  contents: read
  pull-requests: write

# PRの作成・更新時のみ実行
on:
  pull_request_target:
    types: [opened, synchronize, reopened]
    paths:
      - 'sql/**.sql'    # SQLディレクトリ配下の全SQLファイル
      - 'db/checker.sql' # スキーマ定義ファイル

jobs:
  review:
    name: Review SQL Changes
    runs-on: ubuntu-latest
    timeout-minutes: 10

    env:
      MYSQL_VERSION: '8.0'
      MODEL_NAME: 'gemini-2.0-flash-exp'

    steps:
      - name: Checkout PR Head
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
          persist-credentials: false

      - name: Analyze SQL Changes
        id: analyze
        run: >-
          set -euo pipefail;
          
          BASE_SHA="${{ github.event.pull_request.base.sha }}";
          HEAD_SHA="${{ github.event.pull_request.head.sha }}";
          
          SCHEMA_CHANGED=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA" -- 'db/checker.sql' | grep -q . && echo 'true' || echo 'false');
          echo "schema_changed=${SCHEMA_CHANGED}" >> "$GITHUB_OUTPUT";
          
          if [ "$SCHEMA_CHANGED" = "true" ]; then
            find sql -type f -name "*.sql" -print0 | xargs -0 realpath --relative-to=. > sql_files.txt;
          else
            git diff --name-only "$BASE_SHA" "$HEAD_SHA" -- 'sql/*.sql' > sql_files.txt;
          fi;
          
          if [ ! -s sql_files.txt ]; then
            echo "skip=true" >> "$GITHUB_OUTPUT";
            echo "No SQL files to review.";
            exit 0;
          fi

      - name: Prepare Review Content
        if: steps.analyze.outputs.skip != 'true'
        id: prepare
        run: >-
          set -euo pipefail;
          
          # スキーマ変更フラグを設定
          echo "SCHEMA_CHANGED=${{ steps.analyze.outputs.schema_changed }}" >> "$GITHUB_ENV";
          
          if [ -f "db/checker.sql" ]; then
            {
              echo "CHECKER_SQL_CONTENT<<EOF";
              cat "db/checker.sql" | sed 's/`/\\`/g';
              echo "EOF";
            } >> "$GITHUB_ENV";
          fi;
          
          {
            echo "NEW_SQL_CONTENT<<EOF";
            while IFS= read -r file; do
              [ -f "$file" ] || continue;
              echo "-- File: $file";
              cat "$file" | sed 's/`/\\`/g';
              echo;
            done < sql_files.txt;
            echo "EOF";
          } >> "$GITHUB_ENV";
          
          if [ "${{ steps.analyze.outputs.schema_changed }}" = "true" ]; then
            {
              echo "EXISTING_SQL_CONTENT<<EOF";
              while IFS= read -r file; do
                echo "-- File: $file";
                git show "${{ github.event.pull_request.base.sha }}:$file" 2>/dev/null | sed 's/`/\\`/g' || true;
                echo;
              done < sql_files.txt;
              echo "EOF";
            } >> "$GITHUB_ENV";
          fi

      - name: Review SQL with Gemini
        if: steps.analyze.outputs.skip != 'true'
        id: review
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: >-
          set -euo pipefail;

          PROMPT=$(cat .github/workflows/prompts/sql_review.md | envsubst);

          echo "=== Debug: Generated Prompt ===";
          echo "$PROMPT";
          echo "=== End Debug ===";

          RESPONSE=$(curl -sS -w "\n%{http_code}" \
            "https://generativelanguage.googleapis.com/v1beta/models/${MODEL_NAME}:generateContent?key=${GEMINI_API_KEY}" \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHub-Action-SQL-Review" \
            -d '{
              "contents": [{
                "parts": [{
                  "text": "'"$PROMPT"'"
                }]
              }]
            }');

          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1);
          RESPONSE_BODY=$(echo "$RESPONSE" | sed '$ d');

          if [ "$HTTP_STATUS" != "200" ]; then
            echo "::error::API request failed with status ${HTTP_STATUS}";
            echo "Response: ${RESPONSE_BODY}";
            exit 1;
          fi;

          COMMENT=$(echo "$RESPONSE_BODY" | jq -r '.candidates[0].content.parts[0].text // empty');
          if [ -z "$COMMENT" ]; then
            echo "::error::Failed to extract comment from response";
            exit 1;
          fi;

          {
            echo "comment<<EOF";
            echo "$COMMENT";
            echo "EOF";
          } >> "$GITHUB_ENV"

      - name: Post Review Comment
        if: steps.analyze.outputs.skip != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = process.env.comment;
            if (!comment) {
              core.setFailed('No comment to post');
              return;
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `${comment}`
            });

      - name: Check Review Result
        if: steps.analyze.outputs.skip != 'true'
        run: |
          # 絵文字を含むCheck Result行を抽出し、重要度レベルを判定
          CHECK_RESULT=$(echo "${{ env.comment }}" | grep -E "^# (🟢|🟡|🔴) Check Result:" | awk '{print $NF}')
          
          case "$CHECK_RESULT" in
            "OK")
              echo "SQLレビューが正常に完了しました"
              exit 0
              ;;
            "Warning")
              echo "::warning::SQLレビューで警告が検出されました"
              exit 0
              ;;
            "Critical")
              echo "::error::SQLレビューで重大な問題が検出されました"
              exit 1
              ;;
            *)
              echo "::error::不明なレビュー結果です: $CHECK_RESULT"
              exit 1
              ;;
          esac